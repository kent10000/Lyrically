// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var songs = Songs.FromJson(jsonString);

namespace LyricallyGUISongs.Deserializers
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Songs
    {
        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [JsonProperty("response", NullValueHandling = NullValueHandling.Ignore)]
        public Response Response { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public long? Status { get; set; }
    }

    public partial class Response
    {
        [JsonProperty("song", NullValueHandling = NullValueHandling.Ignore)]
        public Song Song { get; set; }
    }

    public partial class Song
    {
        /*[JsonProperty("annotation_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? AnnotationCount { get; set; }

        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("apple_music_id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? AppleMusicId { get; set; }

        [JsonProperty("apple_music_player_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri AppleMusicPlayerUrl { get; set; }

        [JsonProperty("artist_names", NullValueHandling = NullValueHandling.Ignore)]
        public string ArtistNames { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [JsonProperty("embed_content", NullValueHandling = NullValueHandling.Ignore)]
        public string EmbedContent { get; set; }

        [JsonProperty("featured_video", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FeaturedVideo { get; set; }

        [JsonProperty("full_title", NullValueHandling = NullValueHandling.Ignore)]
        public string FullTitle { get; set; }

        [JsonProperty("header_image_thumbnail_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HeaderImageThumbnailUrl { get; set; }

        [JsonProperty("header_image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HeaderImageUrl { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("lyrics_owner_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? LyricsOwnerId { get; set; }

        [JsonProperty("lyrics_placeholder_reason")]
        public object LyricsPlaceholderReason { get; set; }

        [JsonProperty("lyrics_state", NullValueHandling = NullValueHandling.Ignore)]
        public string LyricsState { get; set; }

        [JsonProperty("path", NullValueHandling = NullValueHandling.Ignore)]
        public string Path { get; set; }*/

        // [JsonProperty("pyongs_count")]
        // public object PyongsCount { get; set; }
        //
        // [JsonProperty("recording_location")]
        // public object RecordingLocation { get; set; }
        //
        // [JsonProperty("relationships_index_url", NullValueHandling = NullValueHandling.Ignore)]
        // public Uri RelationshipsIndexUrl { get; set; }

        /*[JsonProperty("release_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ReleaseDate { get; set; }

        [JsonProperty("release_date_for_display", NullValueHandling = NullValueHandling.Ignore)]
        public string ReleaseDateForDisplay { get; set; }

        [JsonProperty("song_art_image_thumbnail_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SongArtImageThumbnailUrl { get; set; }

        [JsonProperty("song_art_image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SongArtImageUrl { get; set; }

        [JsonProperty("stats", NullValueHandling = NullValueHandling.Ignore)]
        public Stats Stats { get; set; }*/

        // [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        // public string Title { get; set; }
        //
        // [JsonProperty("title_with_featured", NullValueHandling = NullValueHandling.Ignore)]
        // public string TitleWithFeatured { get; set; }
        //
        // [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        // public Uri Url { get; set; }

        // [JsonProperty("current_user_metadata", NullValueHandling = NullValueHandling.Ignore)]
        // public SongCurrentUserMetadata CurrentUserMetadata { get; set; }

        [JsonProperty("album", NullValueHandling = NullValueHandling.Ignore)]
        public Album Album { get; set; }

        /*[JsonProperty("custom_performances", NullValueHandling = NullValueHandling.Ignore)]
        public object[] CustomPerformances { get; set; }

        [JsonProperty("description_annotation", NullValueHandling = NullValueHandling.Ignore)]
        public DescriptionAnnotation DescriptionAnnotation { get; set; }

        [JsonProperty("featured_artists", NullValueHandling = NullValueHandling.Ignore)]
        public object[] FeaturedArtists { get; set; }

        [JsonProperty("lyrics_marked_complete_by")]
        public object LyricsMarkedCompleteBy { get; set; }

        [JsonProperty("lyrics_marked_staff_approved_by")]
        public object LyricsMarkedStaffApprovedBy { get; set; }

        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Media { get; set; }*/

        // [JsonProperty("primary_artist", NullValueHandling = NullValueHandling.Ignore)]
        // public Artist PrimaryArtist { get; set; }

        /*[JsonProperty("producer_artists", NullValueHandling = NullValueHandling.Ignore)]
        public object[] ProducerArtists { get; set; }

        [JsonProperty("song_relationships", NullValueHandling = NullValueHandling.Ignore)]
        public SongRelationship[] SongRelationships { get; set; }

        [JsonProperty("verified_annotations_by", NullValueHandling = NullValueHandling.Ignore)]
        public object[] VerifiedAnnotationsBy { get; set; }

        [JsonProperty("verified_contributors", NullValueHandling = NullValueHandling.Ignore)]
        public object[] VerifiedContributors { get; set; }

        [JsonProperty("verified_lyrics_by", NullValueHandling = NullValueHandling.Ignore)]
        public object[] VerifiedLyricsBy { get; set; }

        [JsonProperty("writer_artists", NullValueHandling = NullValueHandling.Ignore)]
        public Artist[] WriterArtists { get; set; }*/
    }

    public partial class Album
    {
        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("cover_art_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri CoverArtUrl { get; set; }

        [JsonProperty("full_title", NullValueHandling = NullValueHandling.Ignore)]
        public string FullTitle { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("artist", NullValueHandling = NullValueHandling.Ignore)]
        public Artist Artist { get; set; }
    }

    public partial class Artist
    {
        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("header_image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HeaderImageUrl { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("is_meme_verified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMemeVerified { get; set; }

        [JsonProperty("is_verified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("iq", NullValueHandling = NullValueHandling.Ignore)]
        public long? Iq { get; set; }
    }

    public partial class SongCurrentUserMetadata
    {
        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Permissions { get; set; }

        [JsonProperty("excluded_permissions", NullValueHandling = NullValueHandling.Ignore)]
        public string[] ExcludedPermissions { get; set; }

        [JsonProperty("interactions", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleInteractions Interactions { get; set; }

        [JsonProperty("relationships", NullValueHandling = NullValueHandling.Ignore)]
        public IqByAction Relationships { get; set; }

        [JsonProperty("iq_by_action", NullValueHandling = NullValueHandling.Ignore)]
        public IqByAction IqByAction { get; set; }
    }

    public partial class PurpleInteractions
    {
        [JsonProperty("pyong", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Pyong { get; set; }

        [JsonProperty("following", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Following { get; set; }
    }

    public partial class IqByAction
    {
    }

    public partial class Description
    {
        [JsonProperty("dom", NullValueHandling = NullValueHandling.Ignore)]
        public DescriptionDom Dom { get; set; }
    }

    public partial class DescriptionDom
    {
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public Child[] Children { get; set; }
    }

    public partial class Child
    {
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("children", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Children { get; set; }
    }

    public partial class DescriptionAnnotation
    {
        [JsonProperty("_type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("annotator_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? AnnotatorId { get; set; }

        [JsonProperty("annotator_login", NullValueHandling = NullValueHandling.Ignore)]
        public string AnnotatorLogin { get; set; }

        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("classification", NullValueHandling = NullValueHandling.Ignore)]
        public string Classification { get; set; }

        [JsonProperty("fragment", NullValueHandling = NullValueHandling.Ignore)]
        public string Fragment { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("is_description", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDescription { get; set; }

        [JsonProperty("path", NullValueHandling = NullValueHandling.Ignore)]
        public string Path { get; set; }

        [JsonProperty("range", NullValueHandling = NullValueHandling.Ignore)]
        public Range Range { get; set; }

        [JsonProperty("song_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? SongId { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("verified_annotator_ids", NullValueHandling = NullValueHandling.Ignore)]
        public object[] VerifiedAnnotatorIds { get; set; }

        [JsonProperty("annotatable", NullValueHandling = NullValueHandling.Ignore)]
        public Annotatable Annotatable { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public Annotation[] Annotations { get; set; }
    }

    public partial class Annotatable
    {
        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("client_timestamps", NullValueHandling = NullValueHandling.Ignore)]
        public ClientTimestamps ClientTimestamps { get; set; }

        [JsonProperty("context", NullValueHandling = NullValueHandling.Ignore)]
        public string Context { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("link_title", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkTitle { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class ClientTimestamps
    {
        [JsonProperty("updated_by_human_at", NullValueHandling = NullValueHandling.Ignore)]
        public long? UpdatedByHumanAt { get; set; }

        [JsonProperty("lyrics_updated_at", NullValueHandling = NullValueHandling.Ignore)]
        public long? LyricsUpdatedAt { get; set; }
    }

    public partial class Annotation
    {
        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("body", NullValueHandling = NullValueHandling.Ignore)]
        public Body Body { get; set; }

        [JsonProperty("comment_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? CommentCount { get; set; }

        [JsonProperty("community", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Community { get; set; }

        [JsonProperty("custom_preview")]
        public object CustomPreview { get; set; }

        [JsonProperty("has_voters", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasVoters { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("pinned", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Pinned { get; set; }

        [JsonProperty("share_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ShareUrl { get; set; }

        [JsonProperty("source")]
        public object Source { get; set; }

        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("verified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Verified { get; set; }

        [JsonProperty("votes_total", NullValueHandling = NullValueHandling.Ignore)]
        public long? VotesTotal { get; set; }

        [JsonProperty("current_user_metadata", NullValueHandling = NullValueHandling.Ignore)]
        public AnnotationCurrentUserMetadata CurrentUserMetadata { get; set; }

        [JsonProperty("authors", NullValueHandling = NullValueHandling.Ignore)]
        public Author[] Authors { get; set; }

        [JsonProperty("cosigned_by", NullValueHandling = NullValueHandling.Ignore)]
        public object[] CosignedBy { get; set; }

        [JsonProperty("rejection_comment")]
        public object RejectionComment { get; set; }

        [JsonProperty("verified_by")]
        public object VerifiedBy { get; set; }
    }

    public partial class Author
    {
        [JsonProperty("attribution", NullValueHandling = NullValueHandling.Ignore)]
        public long? Attribution { get; set; }

        [JsonProperty("pinned_role")]
        public object PinnedRole { get; set; }

        [JsonProperty("user", NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; }
    }

    public partial class User
    {
        [JsonProperty("api_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiPath { get; set; }

        [JsonProperty("avatar", NullValueHandling = NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        [JsonProperty("header_image_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HeaderImageUrl { get; set; }

        [JsonProperty("human_readable_role_for_display", NullValueHandling = NullValueHandling.Ignore)]
        public string HumanReadableRoleForDisplay { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("iq", NullValueHandling = NullValueHandling.Ignore)]
        public long? Iq { get; set; }

        [JsonProperty("login", NullValueHandling = NullValueHandling.Ignore)]
        public string Login { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("role_for_display", NullValueHandling = NullValueHandling.Ignore)]
        public string RoleForDisplay { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("current_user_metadata", NullValueHandling = NullValueHandling.Ignore)]
        public UserCurrentUserMetadata CurrentUserMetadata { get; set; }
    }

    public partial class Avatar
    {
        [JsonProperty("tiny", NullValueHandling = NullValueHandling.Ignore)]
        public Medium Tiny { get; set; }

        [JsonProperty("thumb", NullValueHandling = NullValueHandling.Ignore)]
        public Medium Thumb { get; set; }

        [JsonProperty("small", NullValueHandling = NullValueHandling.Ignore)]
        public Medium Small { get; set; }

        [JsonProperty("medium", NullValueHandling = NullValueHandling.Ignore)]
        public Medium Medium { get; set; }
    }

    public partial class Medium
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("bounding_box", NullValueHandling = NullValueHandling.Ignore)]
        public BoundingBox BoundingBox { get; set; }
    }

    public partial class BoundingBox
    {
        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }
    }

    public partial class UserCurrentUserMetadata
    {
        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Permissions { get; set; }

        [JsonProperty("excluded_permissions", NullValueHandling = NullValueHandling.Ignore)]
        public string[] ExcludedPermissions { get; set; }

        [JsonProperty("interactions", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyInteractions Interactions { get; set; }
    }

    public partial class FluffyInteractions
    {
        [JsonProperty("following", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Following { get; set; }
    }

    public partial class Body
    {
        [JsonProperty("dom", NullValueHandling = NullValueHandling.Ignore)]
        public BodyDom Dom { get; set; }
    }

    public partial class BodyDom
    {
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }
    }

    public partial class AnnotationCurrentUserMetadata
    {
        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Permissions { get; set; }

        [JsonProperty("excluded_permissions", NullValueHandling = NullValueHandling.Ignore)]
        public string[] ExcludedPermissions { get; set; }

        [JsonProperty("interactions", NullValueHandling = NullValueHandling.Ignore)]
        public TentacledInteractions Interactions { get; set; }

        [JsonProperty("iq_by_action", NullValueHandling = NullValueHandling.Ignore)]
        public IqByAction IqByAction { get; set; }
    }

    public partial class TentacledInteractions
    {
        [JsonProperty("cosign", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Cosign { get; set; }

        [JsonProperty("pyong", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Pyong { get; set; }

        [JsonProperty("vote")]
        public object Vote { get; set; }
    }

    public partial class Range
    {
        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public string Content { get; set; }
    }

    public partial class SongRelationship
    {
        [JsonProperty("relationship_type", NullValueHandling = NullValueHandling.Ignore)]
        public string RelationshipType { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("songs", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Songs { get; set; }
    }

    public partial class Stats
    {
        [JsonProperty("accepted_annotations", NullValueHandling = NullValueHandling.Ignore)]
        public long? AcceptedAnnotations { get; set; }

        [JsonProperty("contributors", NullValueHandling = NullValueHandling.Ignore)]
        public long? Contributors { get; set; }

        [JsonProperty("iq_earners", NullValueHandling = NullValueHandling.Ignore)]
        public long? IqEarners { get; set; }

        [JsonProperty("transcribers", NullValueHandling = NullValueHandling.Ignore)]
        public long? Transcribers { get; set; }

        [JsonProperty("unreviewed_annotations", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnreviewedAnnotations { get; set; }

        [JsonProperty("verified_annotations", NullValueHandling = NullValueHandling.Ignore)]
        public long? VerifiedAnnotations { get; set; }

        [JsonProperty("hot", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Hot { get; set; }
    }

    public partial class Songs
    {
        public static Songs FromJson(string json) => JsonConvert.DeserializeObject<Songs>(json, LyricallyGUISongs.Deserializers.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Songs self) => JsonConvert.SerializeObject(self, LyricallyGUISongs.Deserializers.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
